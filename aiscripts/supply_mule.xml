<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="supplymule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://x4libonline.ddns.net\libraries\aiscripts.xsd" version="2">
	<!-- Setup context menu order-->
	<order id="SupplyMule" name="M4- Supply Mule" description="Supplys own Stations Needs" category="trade" infinite="true">
		<params>
			<!-- menu option: Source Station (Define Source Station)-->
			<param name="sourceStation" required="false" default="null" type="object" text="Source Station" comment="The source station">
				<input_param name="class" value="[class.station]" />
			</param>
			<!-- menu option: Assign Ship to Station (Are we assigning this ship to a station if player owned.)-->
			<param name="assignSrc" type="bool" default="false" text="Assign Ship To Station" comment="Assign to the source station if it's the players." />
			<!-- menu option: Serve Source Only (will only serve the source station if used)-->
			<param name="dedicatedServe" type="bool" default="false" text="Serve Source Only" comment="Will only serve the configured source station" />
			<!-- menu option: Player Stations Only (will only buy from player owned station if used)-->
			<param name="tradeWithOwn" required="false" type="bool" default="false" text="Player Suppliers Only" comment="Buys from player stations only" />
			<!-- menu option: Max Trades (Maximum trades per buy run)-->
			<param name="maxtrades" required="false" default="5" type="number" text="Max Trades" comment="Max Trades per buy run.">
				<input_param name="startvalue" value="5" />
				<input_param name="min" value="1" />
				<input_param name="max" value="10" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: Max Distance (Maximum Jumpes to buy)-->
			<param name="maxDist" required="false" default="this.ship.pilot.skill.piloting * 2" type="number" text="Max Jumps" comment="Max gate distance to buy.">
				<input_param name="startvalue" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="min" value="0" />
				<input_param name="max" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: wait for build storage-->
			<param name="builder" type="bool" default="false" text="Build Storage ONLY" comment="Will wait for build storage needs instead of finding something to do" />
			<!-- only supply products for factories -->
			<param name="producer" type="bool" default="false" text="Factory Supply ONLY" comment="Will look to supply only factories with products" />
			<!-- lock wares to player selection -->
			<param name="lockWares" type="bool" default="false" text="Lock Wares to User Selection" comment="Locks the Users ware selection, otherwise we need to wipe it each time we call the script" />
			<!-- menu option: WareBasket List-->
			<param name="specialWareBasket" required="false" default="[]" type="list" text="Wares (all by default)" comment="Warebasket">
				<input_param name="type" value="'ware'" />
				<input_param name="cancarry" value="this.ship" />
			</param>
			<!-- Internal parameter used to restart the script on version update if required -->
			<param name="restartScript" type="internal" default="false"/>
			<!-- menu option: Profit Override Percentage (Used when buying/selling at own warehouses mostly) -->
			<param name="playerBuyMod" default="100" type="number" text="Player Buy Mod" comment="Owned Station Buy price adjustment, 0=ignore manager price 100= Obey Station Manager's buy offer.">
				<input_param name="startvalue" value="100" />
				<input_param name="min" value="0" />
				<input_param name="max" value="100" />
				<input_param name="step" value="5" />
			</param>
		</params>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true" />
			<!-- no idea wtf this is for-->
		</requires>
	</order>


	<interrupts>
		<handler ref="SectorChangeHandler" />
		<handler ref="AttackHandler" />
		<handler ref="MissileLockHandler" />
		<handler ref="ScannedHandler" />
		<handler ref="InspectedHandler" />
		<handler ref="FoundAbandonedHandler" />
		<handler ref="ResupplyHandler" />
		<handler ref="JobRemoveRequestHandler" />
		<handler ref="TargetInvalidHandler" />
	</interrupts>

	<init>
		<!-- debug settings -->
		<set_value name="$debugchance" exact="100" />
		<set_value name="$debugFileName" exact="'SupplyMule - ' + this.ship.idcode"/>
		<set_value name="$debugDirName" exact="'MulesExtended'"/>
		<!-- init section for mule script -->
		<set_value name="$logbookEntryTitle" exact="'SupplyMule: '+this.ship.knownname+' ( '+this.ship.idcode+' )'"/>
		<set_value name="$object" exact="this.assignedcontrolled" />
		<set_order_syncpoint_reached order="this.ship.order" />
		<set_command_action commandaction="commandaction.searchingtrades" />
		<do_if value="$sourceStation and ($sourceStation.owner == this.ship.owner) and $assignSrc">
			<set_object_commander object="this.ship" commander="$sourceStation" assignment="assignment.trade" />
		</do_if>
	</init>

	<patch sinceversion="2">
		<!-- This will reissue any standing supply mule orders -->
		<!-- it should mitigate any problems with blocking actions beeing updated inbetween savegames -->
		<debug_text text="'PATCH: Restarting supply mule script on load for version safety on mule %1'.[this.ship.idcode]" filter="savegame"/>
		<edit_order_param order="this.assignedcontrolled.order" param="'restartScript'" value="true"/>
	</patch>

	<attention min="unknown">
		<actions>
			<label name="start" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ScriptStart'" output="false" append="false" />

			<!-- Dump Mule Settings -->
			<do_if value="$debugchance">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Supply Mule Settings:'" output="false" append="true" />
				<do_if value="$sourceStation">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: %1 (%2)'.[$sourceStation.knownname,$sourceStation.idcode]" output="false" append="true" />
				</do_if>
				<do_else>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: not set)'" output="false" append="true" />
				</do_else>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    assignSrc: %1'.[$assignSrc]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    tradeWithOwn: %1'.[$tradeWithOwn]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxtrades: %1'.[$maxtrades]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxDist: %1'.[$maxDist]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    builder: %1'.[$builder]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    producer: %1'.[$producer]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    lockWares: %1'.[$lockWares]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    specialWareBasket: %1'.[$specialWareBasket]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    playerBuyMod: %1'.[$playerBuyMod]" output="false" append="true" />
			</do_if>

			<do_if value="$dedicatedServe and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: dedicatedServe (No Station configured)'" output="false" append="true" />
				<set_value name="$dedicatedServe" exact="false" />
			</do_if>

			<do_if value="$assignSrc and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: assignSrc (No Station configured)'" output="false" append="true" />
				<set_value name="$assignSrc" exact="false" />
			</do_if>

			<!--here we want to copy settings to subordinates-->
			<set_value name="$subordinates" exact="this.ship.subordinates" />
			<set_value name="$subNr" exact="$subordinates.count" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'found subordinates: '+$subNr" output="false" append="true" />
			<do_all exact="$subNr" counter="$nr">
				<set_value name="$subordinate" exact="$subordinates.{$nr}" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  '+$nr+' '+$subordinate.knownname" output="false" append="true" />
				<do_if value="$subordinate.type != this.ship.type">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    not same shiptype: '+$subordinate.type+' and '+this.ship.type" output="false" append="true" />
					<continue />
				</do_if>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    copying default behavior'" output="false" append="true" />
				<remove_object_commander object="$subordinate" />
				<create_order object="$subordinate" default="true" id="'SupplyMule'">
					<param name="sourceStation" value="$sourceStation" />
					<param name="assignSrc" value="$assignSrc" />
					<param name="dedicatedServe" value="$dedicatedServe" />
					<param name="tradeWithOwn" value="$tradeWithOwn" />
					<param name="maxtrades" value="$maxtrades" />
					<param name="maxDist" value="[$subordinate.pilot.skill.piloting * 2, $maxDist].min" />
					<param name="builder" value="$builder" />
					<param name="producer" value="$producer" />
					<param name="specialWareBasket" value="$specialWareBasket" />
					<param name="playerBuyMod" value="$playerBuyMod" />
				</create_order>
				<wait min="50ms" max="150ms" />
			</do_all>
			<remove_value name="$subordinates" />
			<remove_value name="$subNr" />
			<remove_value name="$subordinate" />

			<!-- Sell leftover cargo before resuming regular Mule routine -->
			<!-- this was pulled right out of the randomTrader mod -->
			<set_value name="$profitScale" exact="50" />
			<set_value name="$pilotSkill" exact="this.ship.pilot.skill.piloting" />
			<set_value name="$maxBuyRelPrice" exact="((-0.325-0.025*($pilotSkill)f)/90.0-0.01)*($profitScale)f+1-(-0.325-0.025*($pilotSkill)f)/9.0" />
			<set_value name="$searchStep" exact="(1.0-$maxBuyRelPrice)/4.0" />

			<set_value name="$cargo" exact="this.ship.cargo.list" />

			<do_all exact="$cargo.count" counter="$wareInCargo">
				<wait min="50ms" max="150ms" />

				<set_value name="$currentWare" exact="$cargo.{$wareInCargo}" />
				<set_value name="$amount" exact="this.ship.cargo.{$currentWare}.count" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'trying to sell '+$amount+' '+$currentWare+' from cargo'" />

				<do_all exact="5" counter="$reduction">
					<!--searching suiting buy offer, will search 5 times reducing requirements each time by 20% (just want to get rid of that stuff at some point)-->
					<find_buy_offer tradepartner="this.ship" space="player.galaxy" result="$buyOffer" wares="$currentWare">
						<match_buyer tradesknownto="this.owner">
							<match_gate_distance object="this.ship" min="0" max="8">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>
						<relativeprice min="-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001" />
						<amount min="$amount*(0.8^($reduction-1))" />
					</find_buy_offer>
					<wait min="50ms" max="150ms" />

					<do_if value="$buyOffer == null">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  could not find buyer for min amount: '+$amount*(0.8^($reduction-1))+ ' min relative price: '+(-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001)+', max gates : 8'" />
						<continue />
					</do_if>

					<set_value name="$amount" exact="[$amount,$buyOffer.amount].min" />

					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  found buyer: ownername: '+$buyOffer.owner.knownname+'('+$buyOffer.owner.owner.knownname+'), unitprice: '+$buyOffer.unitprice+', amount: '+$buyOffer.amount+', relative price: '+$buyOffer.relativeprice+', totalprice: '+$buyOffer.price+', sector: '+$buyOffer.owner.sector.knownname+', gates from this ship: '+$buyOffer.owner.gatedistance.{this.ship}+', gates from home (from ship if not homebound): '+$buyOffer.owner.gatedistance.{this.ship}+'. selling amount: '+$amount" />

					<do_if value="$buyOffer.available">
						<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" money="$buyOffer.unitprice*$amount" text="'Selling '+$amount+' '+$currentWare+', unitprice: '+$buyOffer.unitprice/100" />
						<create_trade_order object="this.ship" amount="$amount" tradeoffer="$buyOffer" />
						<debug_to_file name="$debugFileName" directory="$debugDirName" text="'  trade created'" />
						<resume label="end" />
					</do_if>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  offer not available anymore'" />
				</do_all>
				<!-- if we got to this point without finding a buyer, we're just going to dump the ware -->
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  had to drop %1 of %2'.[$amount,$currentWare]" />
				<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" text="'had to drop %1 of %2 due to no buyers'.[$amount,$currentWare]" />
				<drop_cargo object="this.ship" ware="$currentWare"  exact="$amount"/>
			</do_all>

			<remove_value name="$searchStep" />
			<remove_value name="$cargo" />
			<remove_value name="$buyOffer" />

			<do_if value="this.ship.cargo.free.container lt (this.ship.cargo.capacity.container/10)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="'SupplyMule'" text="'  cargo is full =('" />
				<wait min="50ms" max="150ms" />
				<resume label="start" />
			</do_if>

			<!-- Create shotcuts for all factions that could be docked/traded at -->
			<get_factions_by_relation relation="dock" result="$allFactions" object="this.ship"/>

			<!-- Create shotcuts for all wares that could be used in searches -->
			<do_if value="$lockWares">
				<set_value name="$allowedWares" exact="$specialWareBasket"/>
			</do_if>
			<do_else>
				<get_ware_definition result="$allowedWares" flags="economy" />
			</do_else>

			<!-- Create a list of prorities for our mule -->
			<!-- It's an ordered tasklist of what out mule should try to do first  -->
			<create_list name="$prioritylist" />
			<!-- ************************ supply mule logic ************************ -->
			<!-- $buyFrom: faction (opt. list) -->
			<!-- $serve: specific station, specific ship, faction, sector -->
			<!-- $type: buildstorage, tradewares, resources, products -->
			<!-- Cases: -->
			<do_if value="not $sourceStation">
				<!-- no station set -->
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'buildstorage' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'buildstorage' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'resources' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'resources' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'products' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'products' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'tradewares' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'tradewares' ]" />
			</do_if>
			<do_elseif value="($sourceStation) and ($sourceStation.owner == this.ship.owner)">
				<!-- player owned station -->
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation, $type = 'buildstorage' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation, $type = 'buildstorage' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation, $type = 'resources' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation, $type = 'resources' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation, $type = 'products' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation, $type = 'products' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation, $type = 'tradewares' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation, $type = 'tradewares' ]" />
				<do_if value="not $dedicatedServe">
					<!-- not dedicated serve -->
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'buildstorage' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'buildstorage' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'resources' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'resources' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'products' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'products' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = faction.player, $type = 'tradewares' ]" />
					<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = faction.player, $type = 'tradewares' ]" />
				</do_if>
			</do_elseif>
			<do_elseif value="($sourceStation) and ($sourceStation.owner != this.ship.owner)">
				<!-- ai owned station  -->
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation ,        $type = 'any' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation ,        $type = 'any' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = faction.player, $serve = $sourceStation.sector , $type = 'any' ]" />
				<append_to_list name="$prioritylist" exact="table[ $buyFromFaction = $allFactions,   $serve = $sourceStation.sector , $type = 'any' ]" />
			</do_elseif>

			<!-- station that is currently served (determined by the first set of orders issued) -->
			<set_value name="$alreadyServing" exact="null"/>
			<!-- Current number of issued trades -->
			<set_value name="$tradeCount" exact="0"/>

			<!-- ************************ main loop ************************-->
			<!-- Start looping over our prioritiylist to determine what to do-->
			<do_for_each name="$priority" in="$prioritylist">
				<!-- Print current priority to debuglog -->
				<run_script chance="$debugchance" sinceversion="2" name="'mule.lib.debug.dump_priority'">
					<param name="priority" value="$priority"/>
					<param name="debugchance" value="$debugchance"/>
					<param name="debugFileName" value="$debugFileName"/>
					<param name="debugDirName" value="$debugDirName"/>
				</run_script>

				<!-- Once a station has been determined to be served by issuing the first orders, we will stick to this station -->
				<!-- This can lead to dublicate searches at the moment -->
				<do_if value="$alreadyServing">
					<set_value name="$currentlyServing" exact="$alreadyServing"/>
				</do_if>
				<do_elseif value="$priority.$serve.isclass.{[class.ship, class.station]}">
					<set_value name="$currentlyServing" exact="$priority.$serve"/>
				</do_elseif>
				<do_else>
					<set_value name="$currentlyServing" exact="null"/>
				</do_else>

				<!-- ************************ check needs ************************ -->
				<!-- Search for buyoffers/needs -->
				<do_if value="$currentlyServing">
					<!-- specific station/ship -->
					<!-- if we search for build storage, we actually don't serve the station, but the storage -->
					<do_if value="($priority.$type == 'buildstorage') and ($currentlyServing.isclass.station)">
						<set_value name="$currentlyServing" exact="$currentlyServing.base"/>
					</do_if>
					<!-- search buyoffers -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" wares="$allowedWares" buyer="$currentlyServing" result="$needs" multiple="true" />
				</do_if>
				<do_elseif value="(typeof $priority.$serve == datatype.faction) or (typeof $priority.$serve.isclass.sector)">
					<!-- unspecific search -->
					<!-- TODO: This could be extended to space in general -->
					<!-- TODO: implement list later on to combine searchtypes -->

					<!-- $factions -->
					<set_value name="$factions" exact="if (typeof $priority.$serve == datatype.faction) then $priority.$serve else $allFactions"/>
					<!-- $space -->
					<set_value name="$space" exact="if ((typeof $priority.$serve == datatype.component) and ($priority.$serve.isclass.sector)) then $priority.$serve else player.galaxy"/>
					<!-- $classes (buildstorage) -->
					<set_value name="$class" exact="if ($priority.$type == 'buildstorage') then class.buildstorage else [class.station, class.ship]"/>

					<!-- search buyoffers -->
					<find_buy_offer space="$space" tradepartner="this.ship" wares="$allowedWares" result="$needs" multiple="true">
						<match_buyer class="$class" owner="$factions"/>
					</find_buy_offer>
				</do_elseif>
				<do_else>
					<!-- unknown serve type -->
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ERROR: Unknown serve type %1'.[$priority.$serve]" />
					<break/>
				</do_else>

				<!-- Filter needs(buyoffers) depending on resources, products, tradewares -->
				<do_if value="$priority.$type != 'any'">
					<create_list name="$filteredNeeds" />
					<do_for_each name="$need" in="$needs">
						<do_if value="
								 ($priority.$type == 'resources'  and $need.owner.resources.{$need.ware}.exists) or
								 ($priority.$type == 'products'   and $need.owner.products.{$need.ware}.exists) or
								 ($priority.$type == 'tradewares' and $need.owner.tradewares.{$need.ware}.exists)" >
							<append_to_list name="$filteredNeeds" exact="$needs.{$i}" />
						</do_if>
					</do_for_each>
					<set_value name="$needs" exact="$filteredNeeds"/>
					<remove_value name="$filteredNeeds"/>
				</do_if>

				<!-- dump all tradeoffers to debug log -->
				<run_script chance="$debugchance" sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
					<param name="headerline" value="'needs'"/>
					<param name="offers" value="$needs"/>
					<param name="debugchance" value="$debugchance"/>
					<param name="debugFileName" value="$debugFileName"/>
					<param name="debugDirName" value="$debugDirName"/>
				</run_script>

				<!-- If there are no needs, just continue with the next on the priority list-->
				<do_if value="$needs.count == 0">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'No offers found'" />
					<continue/>
				</do_if>

				<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
				<!-- but only if the player didn't set them manually -->
				<do_if value="(not $lockWares)">
					<!-- To eliminate dublicates, just create a table with the ware as index -->
					<set_value name="$uniqueWareTable" exact="table[]"/>
					<do_for_each name="$need" in="$needs">
						<set_value name="$uniqueWareTable.{$need.ware}" exact="$need.ware"/>
					</do_for_each>

					<!-- now flush the old warebasket -->
					<remove_from_list name="$specialWareBasket" />
					<!-- and add all unique wares -->
					<do_for_each name="$ware" in="$uniqueWareTable">
						<append_to_list name="$specialWareBasket" exact="$ware" />
					</do_for_each>
				</do_if>

				<!-- ************************ search for suppliers ************************ -->
				<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$supplyOffers" multiple="true">
					<match_seller tradesknownto="this.owner">
						<!-- this next bit of mess is just blacklist handling -->
						<!-- for the object in the gate distance I need a way to start us near a human station -->
						<!-- Gate distance calculation is a bit problematic here, since we could examine 2 stations in two different sectors at the same time. -->
						<!-- Then the max gate distance is undetermined -->
						<match_gate_distance object="$needs.random.owner" min="0" max="$maxDist">
							<blacklist group="blacklistgroup.civilian" object="this.ship" />
						</match_gate_distance>
						<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
						<match_parent>
							<match_parent>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
							</match_parent>
						</match_parent>
						<!-- TODO: Ignore Blacklists for your own faction. or is it better to create a different blacklist for the ship? -->
					</match_seller>
				</find_sell_offer>

				<!-- dump all tradeoffers to debug log -->
				<run_script chance="$debugchance" sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
					<param name="headerline" value="'supply offers'"/>
					<param name="offers" value="$supplyOffers"/>
					<param name="debugchance" value="$debugchance"/>
					<param name="debugFileName" value="$debugFileName"/>
					<param name="debugDirName" value="$debugDirName"/>
				</run_script>

				<!-- ************************ evalute offers & issue orders ************************ -->
				<!-- If we have found matching supply start profit calculation and issue orders -->
				<do_if value="$supplyOffers.count">
					<!-- some setup, repeats in every block for readability -->
					<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
					<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' + $ShipCapacity" />
					<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

					<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
					<create_list name="$supplyTrades" />
					<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
					<set_value name="$occupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
					<set_value name="$emergencyBreak" exact="0"/>
					<do_while value="true">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' + $occupiedCargo" />

						<!-- emergency break to prevent mule from freezing the screen (in theory they should never crash) -->
						<set_value name="$emergencyBreak" operation="add" exact="1"/>
						<do_if value="$emergencyBreak > 100">
							<set_value name="$emergencyText" exact="'Suppymule %s (%s) crashed. Check debug log for more infos and report this error to the mod developers (with a full debug log file).'.[this.ship.knownname, this.ship.idcode]"/>
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$emergencyText" />
							<write_to_logbook category="alerts" object="this.ship" title="'Supplymule crashed!'" interaction="showonmap" text="$emergencyText" />
							<create_order object="this.ship" id="Wait" default="true"/>
							<return/>
						</do_if>

						<do_if value="$occupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, skip to end'" />
							<!-- cargo full, skip to end -->
							<resume label="end"/>
						</do_if>
						<do_if value="$tradeCount == $maxtrades">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'max trades, skip to end'" />
							<!-- max trades, skip to end -->
							<resume label="end"/>
						</do_if>

						<!-- Compare tradeoffers by profit and return the most profitable one -->
						<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
							<param name="buyoffers" value="$needs"/>
							<param name="selloffers" value="$supplyOffers"/>
							<param name="shipEntity" value="this"/>
							<param name="occupiedCargo" value="$occupiedCargo"/>
							<param name="tradeForBuildStorage" value="false"/>
							<param name="minCargoSize" value="$minCargoSize"/>
							<param name="sameFactionBuyMod" value="$playerBuyMod"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
							<save_retval name="bestProfit" variable="$bestProfit"/>
							<save_retval name="bestAmount" variable="$bestAmount"/>
							<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
							<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
						</run_script>

						<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
						<!-- if we end up with more than one need, we'll move it down with move_order later -->
						<do_if value="$bestProfit le 0">
							<!-- No more profitable trades, move on to next priority! -->
							<break/>
						</do_if>

						<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
							<set_value name="$tradeText" exact="'buying %s %s from %s (%s) at %s  to sell to %s (%s) at %s for a profit of'.[$bestAmount, $bestNeedTrade.ware, $bestSupplyTrade.owner.knownname, $bestSupplyTrade.owner.idcode, $bestSupplyTrade.unitprice.formatted.{'%s %Cr'}, $bestNeedTrade.owner.knownname, $bestNeedTrade.owner.idcode, $bestNeedTrade.unitprice.formatted.{'%s %Cr'}, $bestProfit.formatted.{'%s %Cr'}]"/>
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$tradeText" />
							<write_to_logbook category="upkeep"  object="this.ship" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="$tradeText" />

							<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
							<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />

							<!-- might be able remove $occupiedCargo in the future -->
							<set_value name="$occupiedCargo" exact="$occupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />
							<!-- Lock in out trading station (prevents us from serving other stations in the same run) -->
							<set_value name="$alreadyServing" exact="$currentlyServing"/>
							<!-- remove used supply offers from evaluation -->
							<remove_from_list name="$supplyOffers" exact="$bestSupplyTrade"/>
							<!-- Trade Count -->
							<set_value name="$tradeCount" operation="add" exact="1"/>
						</do_if>
					</do_while>
				</do_if>
			</do_for_each>

			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Nothing found, check back in a couple of minuites....'" />
			<wait min="3min" max="5min" />
			<resume label="start"/>

			<label name="end" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'******* went to end'" />
		</actions>
	</attention>
</aiscript>