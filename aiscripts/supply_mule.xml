<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="supplymule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://x4libonline.ddns.net\libraries\aiscripts.xsd" version="4">
	<!-- Setup context menu order-->
	<order id="SupplyMule" name="M4- Supply Mule" description="Supplys own Stations Needs" category="trade" infinite="true">
		<params>
			<!-- menu option: Source Station (Define Source Station)-->
			<param name="sourceStation" required="false" default="null" type="object" text="Source Station" comment="The source station">
				<input_param name="class" value="[class.station]" />
			</param>
			<!-- menu option: Assign Ship to Station (Are we assigning this ship to a station if player owned.)-->
			<param name="assignSrc" type="bool" default="false" text="Assign Ship To Station" comment="Assign to the source station if it's the players." />
			<!-- menu option: Serve Source Only (will only serve the source station if used)-->
			<param name="dedicatedServe" type="bool" default="false" text="Serve Source Only" comment="Will only serve the configured source station" />
			<!-- menu option: Player Stations Only (will only buy from player owned station if used)-->
			<param name="tradeWithOwn" required="false" type="bool" default="false" text="Player Suppliers Only" comment="Buys from player stations only" />
			<!-- menu option: Max Trades (Maximum trades per buy run)-->
			<param name="maxtrades" required="false" default="5" type="number" text="Max Trades" comment="Max Trades per buy run.">
				<input_param name="startvalue" value="5" />
				<input_param name="min" value="1" />
				<input_param name="max" value="10" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: Max Distance (Maximum Jumpes to buy)-->
			<param name="maxDist" required="false" default="this.ship.pilot.skill.piloting * 2" type="number" text="Max Jumps" comment="Max gate distance to buy.">
				<input_param name="startvalue" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="min" value="0" />
				<input_param name="max" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: wait for build storage-->
			<param name="builder" type="bool" default="false" text="Build Storage ONLY" comment="Will wait for build storage needs instead of finding something to do" />
			<!-- only supply products for factories -->
			<param name="producer" type="bool" default="false" text="Factory Supply ONLY" comment="Will look to supply only factories with products" />
			<!-- lock wares to player selection -->
			<param name="lockWares" type="bool" default="false" text="Lock Wares to User Selection" comment="Locks the Users ware selection, otherwise we need to wipe it each time we call the script" />
			<!-- menu option: WareBasket List-->
			<param name="specialWareBasket" required="false" default="[]" type="list" text="Wares (all by default)" comment="Warebasket">
				<input_param name="type" value="'ware'" />
				<input_param name="cancarry" value="this.ship" />
			</param>
			<!-- menu option: Profit Override Percentage (Used when buying/selling at own warehouses mostly) -->
			<param name="playerBuyMod" default="100" type="number" text="Player Buy Mod" comment="Owned Station Buy price adjustment, 0=ignore manager price 100= Obey Station Manager's buy offer.">
				<input_param name="startvalue" value="100" />
				<input_param name="min" value="0" />
				<input_param name="max" value="100" />
				<input_param name="step" value="5" />
			</param>
		</params>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true" /> <!-- no idea wtf this is for-->
		</requires>
	</order>


	<interrupts>
		<handler ref="SectorChangeHandler" />
		<handler ref="AttackHandler" />
		<handler ref="MissileLockHandler" />
		<handler ref="ScannedHandler" />
		<handler ref="InspectedHandler" />
		<handler ref="FoundAbandonedHandler" />
		<handler ref="ResupplyHandler" />
		<handler ref="JobRemoveRequestHandler" />
		<handler ref="TargetInvalidHandler" />
	</interrupts>

	<init>
		<!-- debug settings -->
		<set_value name="$debugchance" exact="100" />
		<set_value name="$debugFileName" exact="'SupplyMule - ' + this.ship.idcode" />
		<set_value name="$debugDirName" exact="'MulesExtended'" />
		<!-- init section for mule script -->
		<set_value name="$logbookEntryTitle" exact="'SupplyMule: '+this.ship.knownname+' ( '+this.ship.idcode+' )'" />
		<set_value name="$object" exact="this.assignedcontrolled" />
		<set_order_syncpoint_reached order="this.ship.order" />
		<set_command_action commandaction="commandaction.searchingtrades" />
		<do_if value="$sourceStation and ($sourceStation.owner == this.ship.owner) and $assignSrc">
			<set_object_commander object="this.ship" commander="$sourceStation" assignment="assignment.trade" />
		</do_if>
	</init>

  <patch sinceversion="2">
      <do_if value="$scantick == null">
          <set_value name="$scantick" exact="0" /> 
      </do_if>
      <do_if value="$scantickrate == null">
          <set_value name="$scantickrate" exact="100" /> 
      </do_if>
  </patch>

  <patch sinceversion="3">
      <do_if value="$scantick == null">
          <set_value name="$scantick" exact="0" /> 
      </do_if>
      <do_if value="$tradeOrdersCount == null">
          <set_value name="$tradeOrdersCount" exact="0" /> 
      </do_if>
  </patch>
  <patch sinceversion="4">
      <do_if value="$spendablemoney == null">
        <set_value name="$spendablemoney" exact="player.money" />
        <do_if value="this.ship.commander">
           <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
            <set_value name="$spendablemoney" exact="this.ship.commander.money" />
          </do_if>
        </do_if>
      </do_if>
  </patch>
	<attention min="unknown">
		<actions>
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ScriptStart'" output="false" append="false" />

            <set_value name="$tradeOrdersCount" exact="0" /> 
            <set_value name="$scantick" exact="0" /> 
            <set_value name="$scantickrate" exact="100" />
			<label name="start" />
			<set_value name="$PerformanceTime" exact="player.age" />

            <set_value name="$spendablemoney" exact="player.money" />
            <do_if value="this.ship.commander">
               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
              </do_if>
            </do_if>

			<!-- Dump Mule Settings -->
			<do_if value="$debugchance">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Supply Mule Settings:'" output="false" append="true" />
				<do_if value="$sourceStation">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: %1 (%2)'.[$sourceStation.knownname,$sourceStation.idcode]" output="false" append="true" />
				</do_if>
				<do_else>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: not set'" output="false" append="true" />
				</do_else>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    assignSrc: %1'.[$assignSrc]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    tradeWithOwn: %1'.[$tradeWithOwn]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxtrades: %1'.[$maxtrades]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxDist: %1'.[$maxDist]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    builder: %1'.[$builder]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    producer: %1'.[$producer]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    lockWares: %1'.[$lockWares]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    specialWareBasket: %1'.[$specialWareBasket]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    playerBuyMod: %1'.[$playerBuyMod]" output="false" append="true" />
			</do_if>

			<do_if value="$dedicatedServe and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: dedicatedServe (No Station configured)'" output="false" append="true" />
				<set_value name="$dedicatedServe" exact="false" />
			</do_if>

			<do_if value="$assignSrc and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: assignSrc (No Station configured)'" output="false" append="true" />
				<set_value name="$assignSrc" exact="false" />
			</do_if>

			<!--here we want to copy settings to subordinates-->
			<set_value name="$subordinates" exact="this.ship.subordinates" />
			<set_value name="$subNr" exact="$subordinates.count" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'found subordinates: '+$subNr" output="false" append="true" />
			<do_all exact="$subNr" counter="$nr">
				<set_value name="$subordinate" exact="$subordinates.{$nr}" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  '+$nr+' '+$subordinate.knownname" output="false" append="true" />
				<do_if value="$subordinate.type != this.ship.type">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    not same shiptype: '+$subordinate.type+' and '+this.ship.type" output="false" append="true" />
					<continue />
				</do_if>
				<do_if value="global.$v1024cf_mod_loaded?" comment="Checking that this value exists; true if Civilian Fleets is loaded.">
					<!-- Civilian Fleets loaded. -->
					<!-- Check also, where Civ-Fleet is loaded but the user is not using the Civ-Fleet Supply Mules fleet -->
					<do_if value="$subordinate.assignment == assignment.trade" comment="Checking if the Mule is being handled by Civ-Fleets, that is the characteristic property.">
						<!-- Skip the handling on this side, stay in the fleet, and let Civilian Fleets handle the order sync. -->
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    is handled by Civilian Fleets; skipping'" output="false" append="true" />
						<continue />
					</do_if>
				</do_if>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    copying default behavior'" output="false" append="true" />
				<remove_object_commander object="$subordinate" />
				<create_order object="$subordinate" default="true" id="'SupplyMule'">
					<param name="sourceStation" value="$sourceStation" />
					<param name="assignSrc" value="$assignSrc" />
					<param name="dedicatedServe" value="$dedicatedServe" />
					<param name="tradeWithOwn" value="$tradeWithOwn" />
					<param name="maxtrades" value="$maxtrades" />
					<param name="maxDist" value="[$subordinate.pilot.skill.piloting * 2, $maxDist].min" />
					<param name="builder" value="$builder" />
					<param name="producer" value="$producer" />
					<param name="specialWareBasket" value="$specialWareBasket" />
					<param name="playerBuyMod" value="$playerBuyMod" />
				</create_order>
				<wait min="50ms" max="150ms" />
			</do_all>
			<remove_value name="$subordinates" />
			<remove_value name="$subNr" />
			<remove_value name="$subordinate" />

			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Setting subordinates used up: ' + (player.age-$PerformanceTime) + ' Seconds'" />
			<set_value name="$PerformanceTime" exact="player.age" />

			<!-- Sell leftover cargo before resuming regular Mule routine -->
			<!-- this was pulled right out of the randomTrader mod -->
			<set_value name="$profitScale" exact="50" />
			<set_value name="$pilotSkill" exact="this.ship.pilot.skill.piloting" />
			<set_value name="$maxBuyRelPrice" exact="((-0.325-0.025*($pilotSkill)f)/90.0-0.01)*($profitScale)f+1-(-0.325-0.025*($pilotSkill)f)/9.0" />
			<set_value name="$searchStep" exact="(1.0-$maxBuyRelPrice)/4.0" />

			<set_value name="$cargo" exact="this.ship.cargo.list" />

			<do_all exact="$cargo.count" counter="$wareInCargo">
				<wait min="50ms" max="150ms" />

				<set_value name="$currentWare" exact="$cargo.{$wareInCargo}" />
				<set_value name="$amount" exact="this.ship.cargo.{$currentWare}.count" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'trying to sell '+$amount+' '+$currentWare+' from cargo'" />

				<do_all exact="5" counter="$reduction">
					<!--searching suiting buy offer, will search 5 times reducing requirements each time by 20% (just want to get rid of that stuff at some point)-->
					<find_buy_offer tradepartner="this.ship" space="player.galaxy" result="$buyOffer" wares="$currentWare">
						<match_buyer tradesknownto="this.owner">
							<match_gate_distance object="this.ship" min="0" max="8">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>
						<relativeprice min="-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001" />
						<amount min="$amount*(0.8^($reduction-1))" />
					</find_buy_offer>
					<wait min="50ms" max="150ms" />

					<do_if value="$buyOffer == null">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  could not find buyer for min amount: '+$amount*(0.8^($reduction-1))+ ' min relative price: '+(-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001)+', max gates : 8'" />
						<continue />
					</do_if>

					<set_value name="$amount" exact="[$amount,$buyOffer.amount].min" />

					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  found buyer: ownername: '+$buyOffer.owner.knownname+'('+$buyOffer.owner.owner.knownname+'), unitprice: '+$buyOffer.unitprice+', amount: '+$buyOffer.amount+', relative price: '+$buyOffer.relativeprice+', totalprice: '+$buyOffer.price+', sector: '+$buyOffer.owner.sector.knownname+', gates from this ship: '+$buyOffer.owner.gatedistance.{this.ship}+', gates from home (from ship if not homebound): '+$buyOffer.owner.gatedistance.{this.ship}+'. selling amount: '+$amount" />

					<do_if value="$buyOffer.available">
						<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" money="$buyOffer.unitprice*$amount" text="'Selling '+$amount+' '+$currentWare+', unitprice: '+$buyOffer.unitprice/100" />
						<create_trade_order object="this.ship" amount="$amount" tradeoffer="$buyOffer" />
						<debug_to_file name="$debugFileName" directory="$debugDirName" text="'  trade created'" />
						<resume label="end" />
					</do_if>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  offer not available anymore'" />
				</do_all>
				<!-- if we got to this point without finding a buyer, we're just going to dump the ware -->
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  had to drop %1 of %2'.[$amount,$currentWare]" />
				<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" text="'had to drop %1 of %2 due to no buyers'.[$amount,$currentWare]" />
				<drop_cargo object="this.ship" ware="$currentWare" exact="$amount" />
			</do_all>

			<remove_value name="$searchStep" />
			<remove_value name="$cargo" />
			<remove_value name="$buyOffer" />

			<do_if value="this.ship.cargo.free.container lt (this.ship.cargo.capacity.container/10)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="'SupplyMule'" text="'  cargo is full =('" />
				<wait min="50ms" max="150ms" />
				<resume label="start" />
			</do_if>

			<!-- Debug: Selling left over wares performance metrics -->
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Selling leftover cargo used up: ' + (player.age-$PerformanceTime) + ' Seconds'" />
			<set_value name="$PerformanceTime" exact="player.age" />

			<!-- we're going to step through everything in logical order. It will make the code longer in lines but it will
			hopefully make things more maintainable and readable for the future -->

			<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
            <set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
            <set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
            <debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied cargo ' + $OccupiedCargo + ' of ' + $ShipCapacity + ', min: ' + $minCargoSize" />
			<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
				<resume label="end" />
			</do_if>

			<!-- first we will deal with the situation where you don't set a station -->

			<!-- ************************ case where no station is set ************************** -->
			<do_if value="not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- No Source Station set. Entering logic block for not $sourceStation'" />

				<!-- ************************ buy from player, sell to player build storage ************************** -->
				<do_if value="($builder) or (not $producer)">
					<!-- ************************ buy from player, sell to player build storage ************************** -->
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- buy from player sell to player build storage in galaxy'" />

					<!-- finding the player build storage needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner">
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station build needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerBuildNeeds count: ' +$playerBuildNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player build storage needs:'" />
						<do_if value="$playerBuildNeeds.count and $debugchance">
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.base.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerBuildNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="this.ship" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player owned supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    
					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, do it anyway -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
											<continue />
										</do_elseif>


										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt ($scantickrate) and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                      <wait exact="1ms" />
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if> <!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to player build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer))">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to player build storage in galaxy'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner">
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station build needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerBuildNeeds count: ' +$playerBuildNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player build storage needs:'" />
						<do_if value="$playerBuildNeeds.count and $debugchance">
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.base.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerBuildNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerBuildNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, let it through -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
											<continue />
										</do_elseif>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-(($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}+this.ship.gatedistance.{$someSupply.seller}.{blacklistgroup.civilian}.{this.assignedcontrolled})*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>

                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to player products ************************** -->
				<do_if value="(not $builder) or ($producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player production goods in galaxy'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="(($isResource) or ($isProduct)) and ($tmpProductNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerProductNeeds count: ' +$playerProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player product storage needs:'" />
						<do_if value="$playerProductNeeds.count and $debugchance">
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerProductNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="this.ship" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player production goods in galaxy'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="(($isResource) or ($isProduct)) and ($tmpProductNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerProductNeeds count: ' +$playerProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player product storage needs:'" />
						<do_if value="$playerProductNeeds.count and $debugchance">
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerProductNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerProductNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<get_ware_reservation object="$someSupply.owner" type="sell" ware="$someSupply.ware" result="$supplyReservations" />
										<set_value name="$affordableAmount" exact="[$someSupply.amount-$supplyReservations,0].max" />
										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-(($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}+this.ship.gatedistance.{$someSupply.seller}.{blacklistgroup.civilian}.{this.assignedcontrolled})*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit
												+ ' jump distance: ' + ($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled})" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player products-->

				<!-- ************************ buy from player, sell to player tradewares ************************** -->
				<do_if value="(not $builder) and (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player tradewares in galaxy'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerTradeNeeds count: ' +$playerTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player tradeware needs:'" />
						<do_if value="$playerTradeNeeds.count and $debugchance">
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerTradeNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="this.ship" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeOrders" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to player tradewares-->

				<!-- ************************ buy from anyone, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player tradewares in galaxy'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
							<match_gate_distance object="this.ship" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware and ($tmpTradeNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerTradeNeeds count: ' +$playerTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player tradeware needs:'" />
						<do_if value="$playerTradeNeeds.count and $debugchance">
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerTradeNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerTradeNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />
									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-(($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}+this.ship.gatedistance.{$someSupply.seller}.{blacklistgroup.civilian}.{this.assignedcontrolled})*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player tradewares-->

			</do_if> <!-- end of no $sourceStation if-->

			<!-- ************************ case where station is set and owned by plaver ************************** -->
			<do_if value="$sourceStation and ($sourceStation.owner==this.ship.owner)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- Source Station owned by Player block '" />

				<!-- ************************ buy from player, sell to station build storage ************************** -->
				<do_if value="($builder) or (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to single station build storage'" />

					<!-- finding the player build storage needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" buyer="$sourceStation.buildstorage" result="$stationBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station build needs (count: %1)'.[$stationBuildNeeds.count]" />
						<do_if value="$stationBuildNeeds.count and $debugchance">
							<do_all exact="$stationBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    %1 (%2): %3 %4 %5 %6 %7'.[$offer.owner.base.knownname, $offer.owner.base.idcode, $offer.ware, $offer.amount, $offer.relativeprice, $offer.offeramount, $offer.stocklevel]" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationBuildNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player owned supply offers (count: %1)'.[$playerSupplyOffers.count]" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    %1 (%2): %3 %4 %5 %6 %7'.[$offer.owner.knownname, $offer.owner.idcode, $offer.ware, $offer.amount, $offer.relativeprice, $offer.offeramount, $offer.stocklevel]" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationBuildNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, do it anyway -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
											<continue />
										</do_elseif>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationBuildNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if> <!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to station build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer))">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to single station build storage'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation.buildstorage" tradepartner="this.ship" result="$stationBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station build needs (count: %1)'.[$stationBuildNeeds.count]" />
						<do_if value="$stationBuildNeeds.count and $debugchance">
							<do_all exact="$stationBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.base.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationBuildNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
    						<match_seller tradesknownto="this.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationBuildNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<!-- how much can the station (not build storage) afford/store? -->
										<!-- This is required because we issue a trade order using the ship, which only interacts with the stations account. -->
										<!-- Buyoffers are based on the buildstorage account -->
										<!-- The actual buying is done using the stations account (egosofts implementation as of 02.05.2020), when ordering your own ships that are assigned to the station or stations buildstorage -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />

										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />
										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, do it anyway -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
                                            <debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
    												+ ' need amount: ' + $targetOfferedAmount
    												+ ' supply amount: ' + $someSupply.amount
    												+ ' affordable amount: ' + $affordableAmount
    												+ ' ship can hold: ' + $cargoHauled
    												+ ' amount will be: ' + $tradeAmount
    												+ ' need unitprice: ' + $someNeed.unitprice
    												+ ' supp unitprice: ' + $someSupply.unitprice
    												+ ' player buy modifier: ' + $playerBuyMod
    												+ ' minCargoSize: ' + $minCargoSize
    												+ ' size will be: ' + $tradeAmount*$someNeed.ware.volume" />
											<continue />
										</do_elseif>

                                        <debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' need amount: ' + $targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' minCargoSize: ' + $minCargoSize
												+ ' size will be: ' + $tradeAmount*$someNeed.ware.volume" />

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />
										<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="' amount check passed, profit ' + $currentProfit" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />

										<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="' scaled profit ' + $currentProfit" />


										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationBuildNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if> <!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to station products ************************** -->
				<do_if value="(not $builder) or ($producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to single station production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationProductNeeds count: ' +$stationProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station product storage needs:'" />
						<do_if value="$stationProductNeeds.count and $debugchance">
							<do_all exact="$stationProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationProductNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationProductNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<!-- I have seen this $someNeed.ware.id error before implying that something is null 
										I can't figure out why it would error here but not in the debug list above. Makes me think
										perhaps it's erroring because we've already filled the need and the order has disappeared completely-->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to station products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to single station production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="(($isResource) or ($isProduct)) and ($tmpProductNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationProductNeeds count: ' +$stationProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station product storage needs:'" />
						<do_if value="$stationProductNeeds.count and $debugchance">
							<do_all exact="$stationProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationProductNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
    						<match_seller tradesknownto="this.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<!-- for the object in the gate distance I need a way to start us near a human station -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationProductNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<!-- how much can the station afford/store? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">                                            
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' + $targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' target affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' profit: ' + $currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to station products-->

				<!-- ************************ buy from player, sell to station tradewares ************************** -->
				<do_if value="(not $builder) and (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to single station tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationTradeNeeds count: ' +$stationTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station tradeware needs:'" />
						<do_if value="$stationTradeNeeds.count and $debugchance">
							<do_all exact="$stationTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationTradeNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationTradeNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationTradeNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to station tradewares-->

				<!-- ************************ buy from anyone, sell to station tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to single station tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware and ($tmpTradeNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationTradeNeeds count: ' +$stationTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station tradeware needs:'" />
						<do_if value="$stationTradeNeeds.count and $debugchance">
							<do_all exact="$stationTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationTradeNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
    						<match_seller tradesknownto="this.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<!-- for the object in the gate distance I need a way to start us near a human station -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationTradeNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<!-- how much can the station afford/store? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' + $targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' target affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' profit: ' + $currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationTradeNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to station tradewares-->

			</do_if> <!-- end of $sourceStation if-->

			<!-- ************************ case where station is set but can be owned by plaver OR AI ************************** -->
			<do_if value="$sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Source Station set to ' +$sourceStation.knownname +' Entering Source Station owned by Player OR AI block'" />

				<!-- ************************ buy from player, sell to AI station ************************** -->
				<do_if value="$sourceStation.owner != this.ship.owner">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to single ai station'" />

					<!-- finding the station needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" buyer="$sourceStation" result="$stationNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationNeeds count: ' +$stationNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station needs:'" />
						<do_if value="$stationNeeds.count and $debugchance">
							<do_all exact="$stationNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$stationNeeds.count + ' '
									+$lockWares + ' '
									+$specialWareBasket" />
					<do_if value="($stationNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player owned supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.amount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if> <!-- end of player to ai station-->

				<!-- ************************ buy from anyone, sell to AI station ************************** -->
				<do_if value="($sourceStation.owner != this.ship.owner) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to single station general needs'" />

					<!-- finding the station needs -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$stationNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- station needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'stationNeeds count: ' +$stationNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'station needs:'" />
						<do_if value="$stationNeeds.count and $debugchance">
							<do_all exact="$stationNeeds.count" counter="$i">
								<set_value name="$offer" exact="$stationNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$stationNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
    						<match_seller tradesknownto="this.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$stationNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$stationNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.amount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />

										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if> <!-- end of anyone to ai station-->

				<!-- ************************ buy from player, sell to player build storage ************************** -->
				<do_if value="(($builder) or (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to station sector player build storage '" />

					<!-- finding the player build storage needs -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station build needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerBuildNeeds count: ' +$playerBuildNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player build storage needs:'" />
						<do_if value="$playerBuildNeeds.count and $debugchance">
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.base.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerBuildNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player owned supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, do it anyway -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
											<continue />
										</do_elseif>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$playerSupplyOrders" />
				</do_if> <!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to player build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to station sector player build storage'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station build needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerBuildNeeds count: ' +$playerBuildNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player build storage needs:'" />
						<do_if value="$playerBuildNeeds.count and $debugchance">
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerBuildNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.base.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerBuildNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerBuildNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerBuildNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerBuildNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<!-- how much can the station afford/store? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<!-- however, if the trade will finish off the build storage for that good, do it anyway -->
										<do_if value="(($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize) and ($tradeAmount != $targetOfferedAmount) and ($tradeAmount != 0)">
											<continue />
										</do_if>
										<do_elseif value="$tradeAmount == 0">
											<continue />
										</do_elseif>
										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' target affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' profit: ' + $currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to station sector player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>
					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerProductNeeds count: ' +$playerProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player product storage needs:'" />
						<do_if value="$playerProductNeeds.count and $debugchance">
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerProductNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to station sector player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="(($isResource) or ($isProduct)) and ($tmpProductNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station product needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerProductNeeds count: ' +$playerProductNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player product storage needs:'" />
						<do_if value="$playerProductNeeds.count and $debugchance">
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerProductNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerProductNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerProductNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerProductNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerProductNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<!-- how much can the station afford/store? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' + $targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' target affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' profit: ' + $currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player products-->

				<!-- ************************ buy from player, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to station sector player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerTradeNeeds count: ' +$playerTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player tradeware needs:'" />
						<do_if value="$playerTradeNeeds.count and $debugchance">
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$playerTradeNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>

    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * $someNeed.ware.volume" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />
									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if> <!-- end of player to player tradewares-->

				<!-- ************************ buy from anyone, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to station sector player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware and ($tmpTradeNeeds.{$i}.restriction.faction == null)">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player station tradeware needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerTradeNeeds count: ' +$playerTradeNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player tradeware needs:'" />
						<do_if value="$playerTradeNeeds.count and $debugchance">
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$offer" exact="$playerTradeNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerTradeNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerTradeNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>
                    
					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$playerTradeNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$playerTradeNeeds.{$i}" />

								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<!-- how much can the station afford/store? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' + $targetOfferedAmount
												+ ' supply amount: ' + $someSupply.amount
												+ ' target affordable amount: ' + $affordableAmount
												+ ' ship can hold: ' + $cargoHauled
												+ ' amount will be: ' + $tradeAmount
												+ ' need unitprice: ' + $someNeed.unitprice
												+ ' supp unitprice: ' + $someSupply.unitprice
												+ ' player buy modifier: ' + $playerBuyMod
												+ ' profit: ' + $currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeOrders" />
					<remove_value name="$aiSupplyOffers" />
				</do_if> <!-- end of anyone to player tradewares-->

				<!-- ************************ buy from player, sell in sector of station ************************** -->
				<do_if value="(not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to ai sector'" />

					<!-- finding the station needs -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$sectorNeeds" multiple="true">
						<match_buyer>
							<match_relation_to object="this.ship" relation="enemy" comparison="not" />
							<match tradesknownto="this.owner" />
							<match owner="this.ship.owner" negate="true" />
							<match class="class.station" />
						</match_buyer>
                    </find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- sector needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'sectorNeeds count: ' +$sectorNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'sector needs:'" />
						<do_if value="$sectorNeeds.count and $debugchance">
							<do_all exact="$sectorNeeds.count" counter="$i">
								<set_value name="$offer" exact="$sectorNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($sectorNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$sectorNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$sectorNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$sectorNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
    						<match_seller owner="this.ship.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player owned supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'playerSupplyOffers count: ' +$playerSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'player Supply Offers:'" />
    						<do_if value="$playerSupplyOffers.count and $debugchance">
    							<do_all exact="$playerSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$playerSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
                    </do_if>
                    

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($sectorNeeds.count gt 0) and ($playerSupplyOffers != null) and ($playerSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$sectorNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$sectorNeeds.{$i}" />
								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.amount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>


								<do_all exact="$playerSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$playerSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">

										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />

										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestNeedTrade != null">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$sectorNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if> <!-- end of player to ai sector-->

				<!-- ************************ buy from anyone, sell in sector of AI station ************************** -->
				<do_if value="(not $dedicatedServe) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to ai of station sector'" />

					<!-- finding the station needs -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$sectorNeeds" multiple="true">
						<match_buyer>
							<match_relation_to object="this.ship" relation="enemy" comparison="not" />
							<match tradesknownto="this.owner" />
							<match owner="this.ship.owner" negate="true" />
							<match class="class.station" />
						</match_buyer>
                    </find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- sector needs'" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'sectorNeeds count: ' +$sectorNeeds.count" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'sector needs:'" />
						<do_if value="$sectorNeeds.count and $debugchance">
							<do_all exact="$sectorNeeds.count" counter="$i">
								<set_value name="$offer" exact="$sectorNeeds.{$i}" />
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$offer.owner.knownname +' '
									+$offer.ware +' '
									+$offer.amount +' '
									+$offer.relativeprice +' '
									+$offer.offeramount +' '
									+$offer.stocklevel" />
							</do_all>
							<remove_value name="$offer" />
						</do_if>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($sectorNeeds.count gt 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$sectorNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$sectorNeeds.{$i}.ware" />
						</do_all>
					</do_if>

                    <do_if value="$sectorNeeds.count gt 0">
    					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
    						<match_seller tradesknownto="this.owner">
    							<!-- this next bit of mess is just blacklist handling -->
    							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
    								<blacklist group="blacklistgroup.civilian" object="this.ship" />
    							</match_gate_distance>
    							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
    							<match_parent>
    								<match_parent>
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
    									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
    								</match_parent>
    							</match_parent>
    						</match_seller>
    					</find_sell_offer>
    
    					<!-- dumping all supplies to the log file -->
    					<do_if value="$debugchance">
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai supply offers'" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'aiSupplyOffers count: ' +$aiSupplyOffers.count" />
    						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ai Supply Offers:'" />
    						<do_if value="$aiSupplyOffers.count and $debugchance">
    							<do_all exact="$aiSupplyOffers.count" counter="$i">
    								<set_value name="$offer" exact="$aiSupplyOffers.{$i}" />
    								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
    									+$offer.owner.knownname +' '
    									+$offer.ware +' '
    									+$offer.amount +' '
    									+$offer.relativeprice +' '
    									+$offer.offeramount +' '
    									+$offer.stocklevel" />
    							</do_all>
    							<remove_value name="$offer" />
    						</do_if>
    					</do_if>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($sectorNeeds.count gt 0) and ($aiSupplyOffers != null) and ($aiSupplyOffers.count gt 0)">
						<!-- some setup, repeats in every block for readability -->


						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->

						<do_all exact="$maxtrades - $tradeOrdersCount" counter="$maxtradeCtr">
                            <set_value name="$spendablemoney" exact="player.money" />
                            <do_if value="this.ship.commander">
                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                              </do_if>
                            </do_if>

							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize gt $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
							<!-- nested loop(s) over the trade offers -->
							<set_value name="$bestProfit" exact="-2147483000" />
							<set_value name="$bestAmount" exact="0" />
							<set_value name="$bestNeedTrade" exact="null" />
							<set_value name="$bestSupplyTrade" exact="null" />
							<do_all exact="$sectorNeeds.count" counter="$i">
								<set_value name="$someNeed" exact="$sectorNeeds.{$i}" />
								<!-- how much does the need want? -->
								<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
                                <set_value name="$targetOfferedAmount" exact="$someNeed.amount" />
                                <do_if value="($targetOfferedAmount+1) * $someNeed.ware.volume lt $minCargoSize"> <continue /> </do_if>

								<do_all exact="$aiSupplyOffers.count" counter="$j">
									<set_value name="$someSupply" exact="$aiSupplyOffers.{$j}" />
									<!-- ignores supply side trades already found -->
									<do_if value="$supplyTrades.indexof.{$someSupply}">
										<continue />
									</do_if>

									<!-- only do any work if the offers are for the same ware -->
									<do_if value="$someSupply.available and $someNeed.available and $someNeed.ware.id == $someSupply.ware.id">
										<!-- how much does the supply have to offer? -->
										<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="this.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
                                        <set_value name="$affordableAmount" exact="[[$spendablemoney / $someSupply.unitprice, $someSupply.amount].min, $affordableAmount].max" />

										<!-- how much can we haul? -->
										<set_value name="$cargoHauled" exact="[(this.ship.cargo.{$someSupply.ware}.max-($OccupiedCargo)f/$someNeed.ware.volume)i, this.ship.cargo.{$someNeed.ware}.free].min" />


										<!-- the amount for the trade is the minimum of the three amounts -->
										<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

										<!-- if the trade is too small, move on -->
										<do_if value="($tradeAmount+1)*$someNeed.ware.volume lt $minCargoSize">
											<continue />
										</do_if>

										<!-- how much profit for this trade? -->
										<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />

									    <set_value name="$currentProfit" exact="($currentProfit)f * (1-($someSupply.seller.gatedistance.{$someNeed.buyer}.{blacklistgroup.civilian}.{this.assignedcontrolled}*0.02)f)" />
										<do_if value="$debugchance">
											<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
												+ ' target desired amount ' +$someNeed.desiredamount
												+ ' target amount ' +$someNeed.amount
												+ ' target offeramount ' +$someNeed.offeramount
												+ ' target reservations ' +$needReservations
												+ ' offer amount - reservations ' +($someNeed.offeramount-$needReservations)
												+ ' clamped amount: ' +$affordableAmount
												+ ' amount will be: ' +$tradeAmount
												+ ' need unitprice: ' +$someNeed.unitprice
												+ ' supp unitprice: ' +$someSupply.unitprice
												+ ' player buy modifier: ' +$playerBuyMod
												+ ' profit: ' +$currentProfit" />
										</do_if>

										<!-- if we found a new best trade, set it! -->
										<do_if value="((($someSupply.seller.owner != this.ship.owner) and ($someNeed.buyer.owner != this.ship.owner)) or (($someSupply.restriction.faction == $someNeed.buyer.owner) or ($someNeed.restriction.faction == $someSupply.seller.owner) or ($someNeed.restriction.faction == $someSupply.restriction.faction))) and ($currentProfit gt $bestProfit or not ($bestNeedTrade.available) or not ($bestSupplyTrade.available))">
											<set_value name="$bestProfit" exact="$currentProfit" />
											<set_value name="$bestNeedTrade" exact="$someNeed" />
											<set_value name="$bestSupplyTrade" exact="$someSupply" />
											<set_value name="$bestAmount" exact="$tradeAmount" />
										</do_if>
									</do_if>
                                      <set_value name="$scantick" exact="$scantick+1" /> 
                                      <do_if value="$scantick gt $scantickrate and ($tradeOrdersCount == 0 or $scantick gt ($scantickrate * 10))"> <!-- waiting with trade orders active will never return -->
                                          <set_value name="$scantick" exact="0" /> 
                                          <wait exact="1ms" />
                                            <set_value name="$spendablemoney" exact="player.money" />
                                            <do_if value="this.ship.commander">
                                               <do_if value="(this.ship.commander.hasownaccount) and (this.ship.commander.defaultorder == null or this.ship.commander.defaultorder.id != 'SupplyMule') and (this.ship.commander.money gt 0)"> <!-- For proper compatability with commanders that arnt stations. -->
                                                <set_value name="$spendablemoney" exact="this.ship.commander.money" />
                                              </do_if>
                                            </do_if>
                                      </do_if>
								</do_all>
							</do_all>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +(($bestAmount * ($bestNeedTrade.unitprice - $bestSupplyTrade.unitprice)).formatted.{'%s %Cr'})" />

									<create_trade_order object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount" immediate="true" />
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
                                    <set_value name="$tradeOrdersCount" exact="$tradeOrdersCount + 1" /> 
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								
							</do_if>
                            <do_else>
                                <break />
                            </do_else>
						</do_all>


						<do_if value="$tradeOrdersCount ge $maxtrades or $OccupiedCargo + $minCargoSize gt $ShipCapacity">
							<resume label="endCheck" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$sectorNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if> <!-- end of anyone to ai station-->


			</do_if>

			<label name="endCheck" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Trade selection: %.5s Seconds'.[player.age-$PerformanceTime]" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'******* endCheck, occupied cargo ' + $OccupiedCargo + ' of ' + $ShipCapacity + ', trades: ' + $tradeOrdersCount" />
			<do_if value="$tradeOrdersCount gt 0">
                <do_if value="$OccupiedCargo lt ($minCargoSize)i*$maxtrades*0.5">
    				<debug_to_file chance="$debugchance" name="$debugFileName" directory="'MulesExtended'" text="'Not enough cargo - cancelling all orders. Occupied ' + $OccupiedCargo + ' of ' +  $ShipCapacity + ', required ' + (($minCargoSize)i*$maxtrades*0.5)" />
                    <cancel_all_orders object="this.ship" /> 
                    <set_value name="$tradeOrdersCount" exact="0" /> 
                </do_if>
			</do_if>
            <do_else>
    			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Nothing found, check back in a couple of minuites....'" />
            </do_else>
    		<wait min="3min" max="5min" />
			<label name="end" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Trade selection/Wait: %.5s Seconds'.[player.age-$PerformanceTime]" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'******* went to end, occupied cargo ' + $OccupiedCargo + ' of ' + $ShipCapacity + ', trades: ' + $tradeOrdersCount" />
		</actions>
	</attention>
</aiscript>
