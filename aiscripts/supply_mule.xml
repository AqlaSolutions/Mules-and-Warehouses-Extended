<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="supplymule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://x4libonline.ddns.net\libraries\aiscripts.xsd" version="2">
	<!-- Setup context menu order-->
	<order id="SupplyMule" name="M4- Supply Mule" description="Supplys own Stations Needs" category="trade" infinite="true">
		<params>
			<!-- menu option: Source Station (Define Source Station)-->
			<param name="sourceStation" required="false" default="null" type="object" text="Source Station" comment="The source station">
				<input_param name="class" value="[class.station]" />
			</param>
			<!-- menu option: Assign Ship to Station (Are we assigning this ship to a station if player owned.)-->
			<param name="assignSrc" type="bool" default="false" text="Assign Ship To Station" comment="Assign to the source station if it's the players." />
			<!-- menu option: Serve Source Only (will only serve the source station if used)-->
			<param name="dedicatedServe" type="bool" default="false" text="Serve Source Only" comment="Will only serve the configured source station" />
			<!-- menu option: Player Stations Only (will only buy from player owned station if used)-->
			<param name="tradeWithOwn" required="false" type="bool" default="false" text="Player Suppliers Only" comment="Buys from player stations only" />
			<!-- menu option: Max Trades (Maximum trades per buy run)-->
			<param name="maxtrades" required="false" default="5" type="number" text="Max Trades" comment="Max Trades per buy run.">
				<input_param name="startvalue" value="5" />
				<input_param name="min" value="1" />
				<input_param name="max" value="10" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: Max Distance (Maximum Jumpes to buy)-->
			<param name="maxDist" required="false" default="this.ship.pilot.skill.piloting * 2" type="number" text="Max Jumps" comment="Max gate distance to buy.">
				<input_param name="startvalue" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="min" value="0" />
				<input_param name="max" value="this.ship.pilot.skill.piloting * 2" />
				<input_param name="step" value="1" />
			</param>
			<!-- menu option: wait for build storage-->
			<param name="builder" type="bool" default="false" text="Build Storage ONLY" comment="Will wait for build storage needs instead of finding something to do" />
			<!-- only supply products for factories -->
			<param name="producer" type="bool" default="false" text="Factory Supply ONLY" comment="Will look to supply only factories with products" />
			<!-- lock wares to player selection -->
			<param name="lockWares" type="bool" default="false" text="Lock Wares to User Selection" comment="Locks the Users ware selection, otherwise we need to wipe it each time we call the script" />
			<!-- menu option: WareBasket List-->
			<param name="specialWareBasket" required="false" default="[]" type="list" text="Wares (all by default)" comment="Warebasket">
				<input_param name="type" value="'ware'" />
				<input_param name="cancarry" value="this.ship" />
			</param>
			<!-- Internal parameter used to restart the script on version update if required -->
			<param name="restartScript" type="internal" default="false"/>
			<!-- menu option: Profit Override Percentage (Used when buying/selling at own warehouses mostly) -->
			<param name="playerBuyMod" default="100" type="number" text="Player Buy Mod" comment="Owned Station Buy price adjustment, 0=ignore manager price 100= Obey Station Manager's buy offer.">
				<input_param name="startvalue" value="100" />
				<input_param name="min" value="0" />
				<input_param name="max" value="100" />
				<input_param name="step" value="5" />
			</param>
		</params>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true" />
			<!-- no idea wtf this is for-->
		</requires>
	</order>


	<interrupts>
		<handler ref="SectorChangeHandler" />
		<handler ref="AttackHandler" />
		<handler ref="MissileLockHandler" />
		<handler ref="ScannedHandler" />
		<handler ref="InspectedHandler" />
		<handler ref="FoundAbandonedHandler" />
		<handler ref="ResupplyHandler" />
		<handler ref="JobRemoveRequestHandler" />
		<handler ref="TargetInvalidHandler" />
	</interrupts>

	<init>
		<!-- debug settings -->
		<set_value name="$debugchance" exact="100" />
		<set_value name="$debugFileName" exact="'SupplyMule - ' + this.ship.idcode"/>
		<set_value name="$debugDirName" exact="'MulesExtended'"/>
		<!-- init section for mule script -->
		<set_value name="$logbookEntryTitle" exact="'SupplyMule: '+this.ship.knownname+' ( '+this.ship.idcode+' )'"/>
		<set_value name="$object" exact="this.assignedcontrolled" />
		<set_order_syncpoint_reached order="this.ship.order" />
		<set_command_action commandaction="commandaction.searchingtrades" />
		<do_if value="$sourceStation and ($sourceStation.owner == this.ship.owner) and $assignSrc">
			<set_object_commander object="this.ship" commander="$sourceStation" assignment="assignment.trade" />
		</do_if>
	</init>
	<patch sinceversion="2">
		<!-- This will reissue any standing supply mule orders -->
		<!-- it should mitigate any problems with blocking actions beeing updated inbetween savegames -->
		<debug_text text="'PATCH: Restarting supply mule script on load for version safety on mule %1'.[this.ship.idcode]" filter="savegame"/>
		<edit_order_param order="this.assignedcontrolled.order" param="'restartScript'" value="true"/>
	</patch>
	<attention min="unknown">
		<actions>
			<label name="start" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ScriptStart'" output="false" append="false" />
			<set_value name="$PerformanceTime" exact="player.age" />

			<!-- Dump Mule Settings -->
			<do_if value="$debugchance">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Supply Mule Settings:'" output="false" append="true" />
				<do_if value="$sourceStation">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: %1 (%2)'.[$sourceStation.knownname,$sourceStation.idcode]" output="false" append="true" />
				</do_if>
				<do_else>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    sourceStation: not set)'" output="false" append="true" />
				</do_else>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    assignSrc: %1'.[$assignSrc]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    tradeWithOwn: %1'.[$tradeWithOwn]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxtrades: %1'.[$maxtrades]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    maxDist: %1'.[$maxDist]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    builder: %1'.[$builder]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    producer: %1'.[$producer]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    lockWares: %1'.[$lockWares]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    specialWareBasket: %1'.[$specialWareBasket]" output="false" append="true" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    playerBuyMod: %1'.[$playerBuyMod]" output="false" append="true" />
			</do_if>

			<do_if value="$dedicatedServe and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: dedicatedServe (No Station configured)'" output="false" append="true" />
				<set_value name="$dedicatedServe" exact="false" />
			</do_if>

			<do_if value="$assignSrc and not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Invalid Config: assignSrc (No Station configured)'" output="false" append="true" />
				<set_value name="$assignSrc" exact="false" />
			</do_if>

			<!--here we want to copy settings to subordinates-->
			<set_value name="$subordinates" exact="this.ship.subordinates" />
			<set_value name="$subNr" exact="$subordinates.count" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'found subordinates: '+$subNr" output="false" append="true" />
			<do_all exact="$subNr" counter="$nr">
				<set_value name="$subordinate" exact="$subordinates.{$nr}" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  '+$nr+' '+$subordinate.knownname" output="false" append="true" />
				<do_if value="$subordinate.type != this.ship.type">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    not same shiptype: '+$subordinate.type+' and '+this.ship.type" output="false" append="true" />
					<continue />
				</do_if>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    copying default behavior'" output="false" append="true" />
				<remove_object_commander object="$subordinate" />
				<create_order object="$subordinate" default="true" id="'SupplyMule'">
					<param name="sourceStation" value="$sourceStation" />
					<param name="assignSrc" value="$assignSrc" />
					<param name="dedicatedServe" value="$dedicatedServe" />
					<param name="tradeWithOwn" value="$tradeWithOwn" />
					<param name="maxtrades" value="$maxtrades" />
					<param name="maxDist" value="[$subordinate.pilot.skill.piloting * 2, $maxDist].min" />
					<param name="builder" value="$builder" />
					<param name="producer" value="$producer" />
					<param name="specialWareBasket" value="$specialWareBasket" />
					<param name="playerBuyMod" value="$playerBuyMod" />
				</create_order>
				<wait min="50ms" max="150ms" />
			</do_all>
			<remove_value name="$subordinates" />
			<remove_value name="$subNr" />
			<remove_value name="$subordinate" />

			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Setting subordinates used up: ' + (player.age-$PerformanceTime) + ' Seconds'" />
			<set_value name="$PerformanceTime" exact="player.age" />

			<!-- Sell leftover cargo before resuming regular Mule routine -->
			<!-- this was pulled right out of the randomTrader mod -->
			<set_value name="$profitScale" exact="50" />
			<set_value name="$pilotSkill" exact="this.ship.pilot.skill.piloting" />
			<set_value name="$maxBuyRelPrice" exact="((-0.325-0.025*($pilotSkill)f)/90.0-0.01)*($profitScale)f+1-(-0.325-0.025*($pilotSkill)f)/9.0" />
			<set_value name="$searchStep" exact="(1.0-$maxBuyRelPrice)/4.0" />

			<set_value name="$cargo" exact="this.ship.cargo.list" />

			<do_all exact="$cargo.count" counter="$wareInCargo">
				<wait min="50ms" max="150ms" />

				<set_value name="$currentWare" exact="$cargo.{$wareInCargo}" />
				<set_value name="$amount" exact="this.ship.cargo.{$currentWare}.count" />
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'trying to sell '+$amount+' '+$currentWare+' from cargo'" />

				<do_all exact="5" counter="$reduction">
					<!--searching suiting buy offer, will search 5 times reducing requirements each time by 20% (just want to get rid of that stuff at some point)-->
					<find_buy_offer tradepartner="this.ship" space="player.galaxy" result="$buyOffer" wares="$currentWare">
						<match_buyer tradesknownto="this.owner">
							<match_gate_distance object="this.ship" min="0" max="8">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_buyer>
						<relativeprice min="-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001" />
						<amount min="$amount*(0.8^($reduction-1))" />
					</find_buy_offer>
					<wait min="50ms" max="150ms" />

					<do_if value="$buyOffer == null">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  could not find buyer for min amount: '+$amount*(0.8^($reduction-1))+ ' min relative price: '+(-$maxBuyRelPrice-(($reduction)f-1.0)*$searchStep-0.001)+', max gates : 8'" />
						<continue />
					</do_if>

					<set_value name="$amount" exact="[$amount,$buyOffer.amount].min" />

					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  found buyer: ownername: '+$buyOffer.owner.knownname+'('+$buyOffer.owner.owner.knownname+'), unitprice: '+$buyOffer.unitprice+', amount: '+$buyOffer.amount+', relative price: '+$buyOffer.relativeprice+', totalprice: '+$buyOffer.price+', sector: '+$buyOffer.owner.sector.knownname+', gates from this ship: '+$buyOffer.owner.gatedistance.{this.ship}+', gates from home (from ship if not homebound): '+$buyOffer.owner.gatedistance.{this.ship}+'. selling amount: '+$amount" />

					<do_if value="$buyOffer.available">
						<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" money="$buyOffer.unitprice*$amount" text="'Selling '+$amount+' '+$currentWare+', unitprice: '+$buyOffer.unitprice/100" />
						<create_trade_order object="this.ship" amount="$amount" tradeoffer="$buyOffer" />
						<debug_to_file name="$debugFileName" directory="$debugDirName" text="'  trade created'" />
						<resume label="end" />
					</do_if>
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  offer not available anymore'" />
				</do_all>
				<!-- if we got to this point without finding a buyer, we're just going to dump the ware -->
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'  had to drop %1 of %2'.[$amount,$currentWare]" />
				<write_to_logbook category="general" title="$logbookEntryTitle" interaction="showonmap" object="this.ship" text="'had to drop %1 of %2 due to no buyers'.[$amount,$currentWare]" />
				<drop_cargo object="this.ship" ware="$currentWare"  exact="$amount"/>
			</do_all>

			<remove_value name="$searchStep" />
			<remove_value name="$cargo" />
			<remove_value name="$buyOffer" />

			<do_if value="this.ship.cargo.free.container lt (this.ship.cargo.capacity.container/10)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="'SupplyMule'" text="'  cargo is full =('" />
				<wait min="50ms" max="150ms" />
				<resume label="start" />
			</do_if>

			<!-- Debug: Selling left over wares performance metrics -->
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Selling leftover cargo used up: ' + (player.age-$PerformanceTime) + ' Seconds'" />
			<set_value name="$PerformanceTime" exact="player.age" />

			<!-- we're going to step through everything in logical order. It will make the code longer in lines but it will
			hopefully make things more maintainable and readable for the future -->

			<!-- first we will deal with the situation where you don't set a station -->

			<!-- ************************ case where no station is set ************************** -->
			<do_if value="not $sourceStation">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- No Source Station set. Entering logic block for not $sourceStation'" />
				<!-- ************************ buy from player, sell to player build storage ************************** -->
				<do_if value="($builder) or (not $producer)">
					<!-- ************************ buy from player, sell to player build storage ************************** -->
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- buy from player sell to player build storage'" />
					<!-- finding the player build storage needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station build needs'"/>
							<param name="offers" value="$playerBuildNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player owned supply offers'"/>
							<param name="offers" value="$playerSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerBuildNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if>
				<!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to player build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer))">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to player build storage'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station build needs'"/>
							<param name="offers" value="$playerBuildNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerBuildNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerBuildNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'ai supply offers'"/>
							<param name="offers" value="$aiSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerBuildNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to player products ************************** -->
				<do_if value="(not $builder) or ($producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station product needs'"/>
							<param name="offers" value="$playerProductNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player supply offers'"/>
							<param name="offers" value="$playerSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerProductNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station product needs'"/>
							<param name="offers" value="$playerProductNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerProductNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerProductNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'ai supply offers'"/>
							<param name="offers" value="$aiSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerProductNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player products-->

				<!-- ************************ buy from player, sell to player tradewares ************************** -->
				<do_if value="(not $builder) and (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station tradeware needs'"/>
							<param name="offers" value="$playerTradeNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player supply offers'"/>
							<param name="offers" value="$playerSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerTradeNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeOrders" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to player tradewares-->

				<!-- ************************ buy from anyone, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station tradeware needs'"/>
							<param name="offers" value="$playerTradeNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerTradeNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerTradeNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'ai supply offers'"/>
							<param name="offers" value="$aiSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>


							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerTradeNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player tradewares-->

			</do_if>
			<!-- end of no $sourceStation if-->

			<!-- ************************ case where station is set and owned by plaver ************************** -->
			<do_if value="$sourceStation and ($sourceStation.owner==this.ship.owner)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- Source Station owned by Player block '" />

				<!-- ************************ buy from player, sell to station build storage ************************** -->
				<do_if value="($builder) or (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to station build storage'" />

					<!-- finding the player build storage needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" buyer="$sourceStation.buildstorage" result="$stationBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player station build needs'"/>
							<param name="offers" value="$stationBuildNeeds"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all needs to the log file -->
					<do_if value="$debugchance">
						<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'">
							<param name="headerline" value="'player owned supply offers'"/>
							<param name="offers" value="$playerSupplyOffers"/>
							<param name="debugchance" value="$debugchance"/>
							<param name="debugFileName" value="$debugFileName"/>
							<param name="debugDirName" value="$debugDirName"/>
						</run_script>
					</do_if>

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationBuildNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationBuildNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationBuildNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if>
				<!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to station build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer))">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to station build storage'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation.buildstorage" tradepartner="this.ship" result="$stationBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station build needs'"/>
						<param name="offers" value="$stationBuildNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
						<match_seller tradesknownto="this.owner">
							<!-- this next bit of mess is just blacklist handling -->
							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_seller>
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationBuildNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationBuildNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationBuildNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if>
				<!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to station products ************************** -->
				<do_if value="(not $builder) or ($producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to station production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'station product needs'"/>
						<param name="offers" value="$stationProductNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationProductNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationProductNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to station products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to station production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'station product needs'"/>
						<param name="offers" value="$stationProductNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
						<match_seller tradesknownto="this.owner">
							<!-- this next bit of mess is just blacklist handling -->
							<!-- for the object in the gate distance I need a way to start us near a human station -->
							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_seller>
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationProductNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationProductNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to station products-->

				<!-- ************************ buy from player, sell to station tradewares ************************** -->
				<do_if value="(not $builder) and (not $producer)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to station tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station tradeware needs'"/>
						<param name="offers" value="$stationTradeNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationTradeNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationTradeNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationTradeNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to station tradewares-->

				<!-- ************************ buy from anyone, sell to station tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to station tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$stationTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$stationTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'station tradeware needs'"/>
						<param name="offers" value="$stationTradeNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
						<match_seller tradesknownto="this.owner">
							<!-- this next bit of mess is just blacklist handling -->
							<!-- for the object in the gate distance I need a way to start us near a human station -->
							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_seller>
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationTradeNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationTradeNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationTradeNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to station tradewares-->

				<!-- ************************ buy from player, sell to player build storage ************************** -->
				<do_if value="(($builder) or (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player build storage '" />

					<!-- finding the player build storage needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station build needs'"/>
						<param name="offers" value="$playerBuildNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player owned supply offerss'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerBuildNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$playerSupplyOrders" />
				</do_if>
				<!-- end of player to player build storage-->

				<!-- ************************ buy from anyone, sell to player build storage ************************** -->
				<do_if value="(not $tradeWithOwn) and (($builder) or (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to player build storage'" />

					<!-- finding the player build storage needs again, just in case -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$playerBuildNeeds" multiple="true">
						<match_buyer class="class.buildstorage" owner="this.ship.owner" />
					</find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station build needs'"/>
						<param name="offers" value="$playerBuildNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerBuildNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerBuildNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerBuildNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerBuildNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerBuildNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerBuildNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerBuildNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="true"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.base.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerBuildNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player build storage-->

				<!-- ************************ buy from player, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>
					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station product needs'"/>
						<param name="offers" value="$playerProductNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerProductNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to player products-->

				<!-- ************************ buy from anyone, sell to player products ************************** -->
				<do_if value="((not $builder) or ($producer)) and (not $tradeWithOwn) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player production goods'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpProductNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpProductNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpProductNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpProductNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="($isResource) or ($isProduct)">
							<append_to_list name="$tmpNeeds" exact="$tmpProductNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerProductNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerProductNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station product needs'"/>
						<param name="offers" value="$playerProductNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerProductNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerProductNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerProductNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerProductNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerProductNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerProductNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerProductNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerProductNeeds" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player products-->

				<!-- ************************ buy from player, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player to player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station tradeware needs'"/>
						<param name="offers" value="$playerTradeNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>
					
					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerTradeNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />
									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeNeeds" />
					<remove_value name="$playerSupplyOffers" />
				</do_if>
				<!-- end of player to player tradewares-->

				<!-- ************************ buy from anyone, sell to player tradewares ************************** -->
				<do_if value="((not $builder) and (not $producer)) and (not $tradeWithOwn) and (not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- anyone to player tradewares'" />

					<!-- finding the player needs -->
					<!-- unfortunately at this level it's not possible to filter for only goods that are products on the station -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" result="$tmpTradeNeeds" multiple="true">
						<match_buyer owner="this.ship.owner">
							<match class="class.buildstorage" negate="true" />
						</match_buyer>

					</find_buy_offer>

					<!-- so we'll do our filtering here -->
					<create_list name="$tmpNeeds" />
					<create_list name="$tmpWareList" />

					<do_all exact="$tmpTradeNeeds.count" counter="$i">
						<set_value name="$ware" exact="$tmpTradeNeeds.{$i}.ware" />
						<set_value name="$owner" exact="$tmpTradeNeeds.{$i}.owner" />
						<set_value name="$isResource" exact="$owner.resources.{$ware}.exists" />
						<set_value name="$isProduct" exact="$owner.products.{$ware}.exists" />
						<set_value name="$isTradeware" exact="$owner.tradewares.{$ware}.exists" />
						<do_if value="$isTradeware">
							<append_to_list name="$tmpNeeds" exact="$tmpTradeNeeds.{$i}" />
							<append_to_list name="$tmpWareList" exact="$ware" />
						</do_if>
						<!-- <set_value name="$isProductInter" exact="$owner.products.{$ware}.intermediate" />
						<set_value name="$isResInter" exact="$owner.resources.{$ware}.intermediate" />
						<set_value name="$isResPri" exact="$owner.resources.{$ware}.primary" />
						<set_value name="$isResSec" exact="$owner.resources.{$ware}.secondary" />
						<debug_to_file chance="$debugchance"  name="$debugFileName" 
						directory="$debugDirName" text="$owner.knownname + ' ' +$ware + ' ' +$isResource + ' ' +$isProduct + ' ' +$isTradeware
						+' ' +$isProductInter +' ' +$isResInter +' ' +$isResPri +' ' +$isResSec " /> -->
					</do_all>

					<!-- clean up from setting the trade needs list and warebasket -->
					<create_list name="$playerTradeNeeds" />
					<do_all exact="$tmpNeeds.count" counter="$i">
						<append_to_list name="$playerTradeNeeds" exact="$tmpNeeds.{$i}" />
					</do_all>
					<!-- we have to do this to populate the warebasket for the player on the UI -->
					<do_if value="$specialWareBasket.count == 0">
						<do_all exact="$tmpWareList.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$tmpWareList.{$i}" />
						</do_all>
					</do_if>
					<!-- <remove_value name="$tmpNeeds" /> -->
					<remove_value name="$tmpWareList" />
					<remove_value name="$ware" />
					<remove_value name="$owner" />
					<remove_value name="$isResource" />
					<remove_value name="$isProduct" />
					<remove_value name="$isTradeware" />

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player station tradeware needs'"/>
						<param name="offers" value="$playerTradeNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($playerTradeNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$playerTradeNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$playerTradeNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<do_if value="$playerTradeNeeds.count">
						<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
							<match_seller tradesknownto="this.owner">
								<!-- this next bit of mess is just blacklist handling -->
								<!-- for the object in the gate distance I need a way to start us near a human station -->
								<match_gate_distance object="$playerTradeNeeds.random.owner" min="0" max="$maxDist">
									<blacklist group="blacklistgroup.civilian" object="this.ship" />
								</match_gate_distance>
								<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
								<match_parent>
									<match_parent>
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
										<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
									</match_parent>
								</match_parent>
							</match_seller>
						</find_sell_offer>
					</do_if>
					<do_else>
						<set_value name="$aiSupplyOffers" exact="[]" />
					</do_else>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($playerTradeNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$playerTradeNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$playerTradeOrders" />
					<remove_value name="$aiSupplyOffers" />
				</do_if>
				<!-- end of anyone to player tradewares-->

			</do_if>
			<!-- end of $sourceStation if-->

			<!-- ************************ case where station is set but not owned by plaver ************************** -->
			<do_if value="($sourceStation) and ($sourceStation.owner != this.ship.owner)">
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Source Station set to ' +$sourceStation.knownname +' Entering Source Station owned by AI block'" />

				<!-- ************************ buy from player, sell to AI station ************************** -->
				<do_if value="true">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to ai station'" />

					<!-- finding the station needs -->
					<find_buy_offer space="player.galaxy" tradepartner="this.ship" buyer="$sourceStation" result="$stationNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'station needs'"/>
						<param name="offers" value="$stationNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'    ' 
									+$stationNeeds.count + ' '
									+$lockWares + ' '
									+$specialWareBasket"/>
					<do_if value="($stationNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player owned supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if>
				<!-- end of player to ai station-->

				<!-- ************************ buy from anyone, sell to AI station ************************** -->
				<do_if value="(not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to station general needs'" />

					<!-- finding the station needs -->
					<find_buy_offer space="player.galaxy" buyer="$sourceStation" tradepartner="this.ship" result="$stationNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'station needs'"/>
						<param name="offers" value="$stationNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($stationNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$stationNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
						<match_seller tradesknownto="this.owner">
							<!-- this next bit of mess is just blacklist handling -->
							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_seller>
					</find_sell_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($stationNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$stationNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$stationNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if>
				<!-- end of anyone to ai station-->

				<!-- ************************ buy from player, sell in sector of station ************************** -->
				<do_if value="(not $dedicatedServe)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- player supply to ai sector'" />

					<!-- finding the station needs -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$sectorNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'sector needs'"/>
						<param name="offers" value="$sectorNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($sectorNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$sectorNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$sectorNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$playerSupplyOffers" multiple="true">
						<match_seller owner="this.ship.owner" />
					</find_sell_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'player owned supply offers'"/>
						<param name="offers" value="$playerSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and playerSupplyOffers contain items then we look for a trade -->
					<do_if value="($sectorNeeds.count > 0) and ($playerSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$sectorNeeds"/>
								<param name="selloffers" value="$playerSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade found'" />

									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'}" />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
										+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
										+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$sectorNeeds" />
					<remove_value name="$playerSupplyOffers" />

				</do_if>
				<!-- end of player to ai sector-->

				<!-- ************************ buy from anyone, sell in sector of AI station ************************** -->
				<do_if value="(not $dedicatedServe) and (not $tradeWithOwn)">
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- ai to same sector as station'" />

					<!-- finding the station needs -->
					<find_buy_offer space="$sourceStation.sector" tradepartner="this.ship" result="$sectorNeeds" multiple="true"></find_buy_offer>

					<!-- dumping all needs to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'sector needs'"/>
						<param name="offers" value="$sectorNeeds"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if we found some needs, set them to the specialWareBasket so they show up for the player in the UI -->
					<!-- but only if the player didn't set them manually -->
					<do_if value="($sectorNeeds.count > 0) and (not $lockWares)">
						<remove_from_list name="$specialWareBasket" />
						<do_all exact="$stationNeeds.count" counter="$i">
							<append_to_list name="$specialWareBasket" exact="$sectorNeeds.{$i}.ware" />
						</do_all>
					</do_if>

					<find_sell_offer space="player.galaxy" tradepartner="this.ship" wares="$specialWareBasket" result="$aiSupplyOffers" multiple="true">
						<match_seller tradesknownto="this.owner">
							<!-- this next bit of mess is just blacklist handling -->
							<match_gate_distance object="$sourceStation" min="0" max="$maxDist">
								<blacklist group="blacklistgroup.civilian" object="this.ship" />
							</match_gate_distance>
							<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.objectactivity" object="this.ship" />
							<match_parent>
								<match_parent>
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectortravel" object="this.ship" />
									<match_use_blacklist group="blacklistgroup.civilian" type="blacklisttype.sectoractivity" object="this.ship" />
								</match_parent>
							</match_parent>
						</match_seller>
					</find_sell_offer>

					<!-- dumping all supplies to the log file -->
					<run_script sinceversion="2" name="'mule.lib.debug.dump_tradeoffers'" chance="$debugchance">
						<param name="headerline" value="'ai supply offers'"/>
						<param name="offers" value="$aiSupplyOffers"/>
						<param name="debugchance" value="$debugchance"/>
						<param name="debugFileName" value="$debugFileName"/>
						<param name="debugDirName" value="$debugDirName"/>
					</run_script>

					<!-- if both playerBuildNeeds and aiSupplyOffers contain items then we look for a trade -->
					<do_if value="($sectorNeeds.count > 0) and ($aiSupplyOffers.count > 0)">
						<!-- some setup, repeats in every block for readability -->
						<set_value name="$ShipCapacity" exact="this.ship.cargo.capacity.all" />
						<set_value name="$minCargoSize" exact="$ShipCapacity / $maxtrades" />
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'ship capacity: ' +$ShipCapacity" />
						<!-- <set_value name="$StartPosition" exact="if $dedicatedServe and $sourceStation then $sourceStation else this.ship" /> -->

						<!-- these lists will hold the trades we want to make. we'll check they're still available before creating the orders -->
						<create_list name="$needTrades" />
						<create_list name="$supplyTrades" />
						<create_list name="$tradeAmounts" />
						<create_list name="$needOrders" />
						<!-- looping over the max number of trade in the UI. if cargo is full already we'll break -->
						<set_value name="$OccupiedCargo" exact="$ShipCapacity - this.ship.cargo.free.all" />
						<do_all exact="$maxtrades" counter="$maxtradeCtr">
							<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Occupied Cargo: ' +$OccupiedCargo" />
							<do_if value="$OccupiedCargo + $minCargoSize / 2 ge $ShipCapacity">
								<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Cargo Full, No More Trades'" />
								<break />
							</do_if>

							<!-- Compare tradeoffers by profit and return the most profitable one -->
							<run_script sinceversion="2" name="'mule.lib.evaluate_tradeoffers'">
								<param name="buyoffers" value="$sectorNeeds"/>
								<param name="selloffers" value="$aiSupplyOffers"/>
								<param name="shipEntity" value="this"/>
								<param name="usedSelloffers" value="$supplyTrades"/>
								<param name="occupiedCargo" value="$OccupiedCargo"/>
								<param name="tradeForBuildStorage" value="false"/>
								<param name="minCargoSize" value="$minCargoSize"/>
								<param name="sameFactionBuyMod" value="$playerBuyMod"/>
								<param name="debugchance" value="$debugchance"/>
								<param name="debugFileName" value="$debugFileName"/>
								<param name="debugDirName" value="$debugDirName"/>
								<save_retval name="bestProfit" variable="$bestProfit"/>
								<save_retval name="bestAmount" variable="$bestAmount"/>
								<save_retval name="bestNeedTrade" variable="$bestNeedTrade"/>
								<save_retval name="bestSupplyTrade" variable="$bestSupplyTrade"/>
							</run_script>

							<!-- if we found a good trade, create the buy order for the supply and the sell order for the need. -->
							<!-- if we end up with more than one need, we'll move it down with move_order later -->
							<do_if value="$bestProfit gt 0">
								<do_if value="$bestSupplyTrade.available and $bestNeedTrade.available">
									<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +$bestSupplyTrade.unitprice.formatted.{'%s %Cr'} + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +$bestNeedTrade.unitprice.formatted.{'%s %Cr'} + ' for a profit of ' +$bestProfit.formatted.{'%s %Cr'} " />

									<write_to_logbook category="upkeep" title="$logbookEntryTitle" interaction="showonmap" money="$bestProfit" text="'buying ' +$bestAmount + ' ' +$bestNeedTrade.ware +' from ' +$bestSupplyTrade.owner.knownname
									+' at ' +($bestSupplyTrade.unitprice.formatted.{'%s %Cr'}) + ' to sell to ' +$bestNeedTrade.owner.knownname
									+' at ' +($bestNeedTrade.unitprice.formatted.{'%s %Cr'}) + ' for a profit of ' +($bestProfit.formatted.{'%s %Cr'})" />

									<create_trade_order name="$bestOrder" object="this.ship" tradeoffer="$bestSupplyTrade" amount="$bestAmount"  immediate="true"/>
									<create_trade_order object="this.ship" tradeoffer="$bestNeedTrade" amount="$bestAmount" />
								</do_if>
								<do_else>
									<continue />
								</do_else>

								<set_value name="$OccupiedCargo" exact="$OccupiedCargo + $bestAmount * $bestSupplyTrade.ware.volume" />

								<append_to_list name="$needTrades" exact="$bestNeedTrade" />
								<append_to_list name="$supplyTrades" exact="$bestSupplyTrade" />
								<append_to_list name="$tradeAmounts" exact="$bestAmount" />
								<append_to_list name="$needOrders" exact="$bestOrder" />
							</do_if>
						</do_all>


						<do_if value="this.ship.orders.count gt 0">
							<resume label="end" />
						</do_if>

					</do_if>
					<remove_value name="$needTrades" />
					<remove_value name="$supplyTrades" />
					<remove_value name="$tradeAmounts" />
					<remove_value name="$needOrders" />
					<remove_value name="$sectorNeeds" />
					<remove_value name="$aiSupplyOrders" />
				</do_if>
				<!-- end of anyone to ai station-->


			</do_if>

			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Trade selection: %.5s Seconds'.[player.age-$PerformanceTime]" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Nothing found, check back in a couple of minuites....'" />
			<wait min="3min" max="5min" />
			<label name="end" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Performance - Trade selection/Wait: %.5s Seconds'.[player.age-$PerformanceTime]" />
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'******* went to end'" />
		</actions>
	</attention>
</aiscript>